/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package test.hw5;

import org.junit.jupiter.api.Test;

import root.vending.VendingMachine;
import root.vending.VendingMachine.Mode;
import root.vending.VendingMachine.Response;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;

public class VendingMachineTest {

    private VendingMachine machineTest;

    @BeforeEach
    void setUp() {
        machineTest = new VendingMachine();
    }

    @Test
    @DisplayName("testGetNumberOfProductFirst")
    public void testGetNumberOfProduct1() {
        assertEquals(0, machineTest.getNumberOfProduct1());
        machineTest.enterAdminMode(117345294655382L);
        machineTest.fillProducts();
        assertEquals(30, machineTest.getNumberOfProduct1());
    }

    @Test
    @DisplayName("testGetNumberOfProductSecond")
    public void testGetNumberOfProduct2() {
        assertEquals(0, machineTest.getNumberOfProduct2());
        machineTest.enterAdminMode(117345294655382L);
        machineTest.fillProducts();
        assertEquals(40, machineTest.getNumberOfProduct2());
    }

    @Test
    @DisplayName("testGetCurrentBalance")
    public void testGetCurrentBalance() {
        assertEquals(0, machineTest.getCurrentBalance());
        machineTest.putCoin1();
        assertEquals(1, machineTest.getCurrentBalance());
        machineTest.putCoin2();
        assertEquals(3, machineTest.getCurrentBalance());
    }

    @Test
    @DisplayName("testGetCurrentMode")
    public void testGetCurrentMode() {
        assertEquals(Mode.OPERATION, machineTest.getCurrentMode());
        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Mode.ADMINISTERING, machineTest.getCurrentMode());
        machineTest.exitAdminMode();
        assertEquals(Mode.OPERATION, machineTest.getCurrentMode());
    }

    @Test
    @DisplayName("testGetCurrentSum")
    public void testGetCurrentSum() {
        assertEquals(0, machineTest.getCurrentSum());
        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Mode.ADMINISTERING, machineTest.getCurrentMode());
        machineTest.fillCoins(20, 10);
        assertEquals(40, machineTest.getCurrentSum());
    }

    @Test
    @DisplayName("testGetCoinsFirst")
    public void testGetCoinsFirst() {
        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Mode.ADMINISTERING, machineTest.getCurrentMode());
        machineTest.fillCoins(10, 5);
        assertEquals(10, machineTest.getCoins1());

        machineTest.exitAdminMode();
        assertEquals(Mode.OPERATION, machineTest.getCurrentMode());
        assertEquals(0, machineTest.getCoins1());

    }

    @Test
    @DisplayName("testGetCoinsSecond")
    public void testGetCoinsSecond() {
        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Mode.ADMINISTERING, machineTest.getCurrentMode());
        machineTest.fillCoins(10, 8);

        machineTest.exitAdminMode();
        assertEquals(Mode.OPERATION, machineTest.getCurrentMode());
        assertEquals(0, machineTest.getCoins2());

    }

    @Test
    @DisplayName("testGetPriceFirst")
    public void testGetPriceFirst() {
        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Mode.ADMINISTERING, machineTest.getCurrentMode());
        machineTest.setPrices(10, 8);
        assertEquals(10, machineTest.getPrice1());
        machineTest.setPrices(8, 8);
        assertEquals(8, machineTest.getPrice1());
    }

    @Test
    @DisplayName("testGetPriceSecond")
    public void testGetPriceSecond() {
        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Mode.ADMINISTERING, machineTest.getCurrentMode());
        machineTest.setPrices(10, 29);
        assertEquals(29, machineTest.getPrice2());
        machineTest.setPrices(8, 19);
        assertEquals(19, machineTest.getPrice2());
    }

    @Test
    @DisplayName("testFillProduct")
    public void testFillProduct() {
        machineTest.exitAdminMode();
        assertEquals(Response.ILLEGAL_OPERATION, machineTest.fillProducts());
        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Response.OK, machineTest.fillProducts());
        assertEquals(30, machineTest.getNumberOfProduct1());
        assertEquals(40, machineTest.getNumberOfProduct2());
    }

    @Test
    @DisplayName("testFillCoins")
    public void testFillCoins() {
        machineTest.exitAdminMode();
        assertEquals(Response.ILLEGAL_OPERATION, machineTest.fillCoins(1, 2));
        assertEquals(Response.ILLEGAL_OPERATION, machineTest.fillCoins(-1, -2));
        assertEquals(Response.ILLEGAL_OPERATION, machineTest.fillCoins(-111, 2));
        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Response.OK, machineTest.fillCoins(30, 20));
        assertEquals(Response.INVALID_PARAM, machineTest.fillCoins(-30, 20));
        assertEquals(Response.INVALID_PARAM, machineTest.fillCoins(30, -1));
        assertEquals(Response.INVALID_PARAM, machineTest.fillCoins(-30, -1));
        assertEquals(Response.INVALID_PARAM, machineTest.fillCoins(100, 20));
        assertEquals(Response.INVALID_PARAM, machineTest.fillCoins(100, 100));
        assertEquals(Response.INVALID_PARAM, machineTest.fillCoins(30, 60));
        assertEquals(30, machineTest.getCoins1());
        assertEquals(20, machineTest.getCoins2());
    }

    @Test
    @DisplayName("testEnterAdminMode")
    public void testEnterAdminMode() {
        machineTest.exitAdminMode();
        assertEquals(Mode.OPERATION, machineTest.getCurrentMode());
        assertEquals(Response.OK, machineTest.enterAdminMode(117345294655382L));
        assertEquals(Mode.ADMINISTERING, machineTest.getCurrentMode());

        machineTest.exitAdminMode();
        assertEquals(Mode.OPERATION, machineTest.getCurrentMode());
        assertEquals(Response.INVALID_PARAM, machineTest.enterAdminMode(11734500));
        assertEquals(Mode.OPERATION, machineTest.getCurrentMode());

        machineTest.putCoin1();
        assertEquals(Mode.OPERATION, machineTest.getCurrentMode());
        assertEquals(Response.CANNOT_PERFORM, machineTest.enterAdminMode(117345294655382L));
        assertEquals(Mode.OPERATION, machineTest.getCurrentMode());
        assertEquals(Response.CANNOT_PERFORM, machineTest.enterAdminMode(11734529));
        assertEquals(Mode.OPERATION, machineTest.getCurrentMode());

        machineTest.returnMoney();
    }

    @Test
    @DisplayName("testExitAdminMode")
    public void testExitAdminMode() {
        assertEquals(Mode.OPERATION, machineTest.getCurrentMode());
        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Mode.ADMINISTERING, machineTest.getCurrentMode());
        machineTest.exitAdminMode();
        assertEquals(Mode.OPERATION, machineTest.getCurrentMode());
    }

    @Test
    @DisplayName("testSetPrice")
    public void testSetPrice() {
        assertEquals(Mode.OPERATION, machineTest.getCurrentMode());
        assertEquals(Response.ILLEGAL_OPERATION, machineTest.setPrices(10, 100));
        assertEquals(Response.ILLEGAL_OPERATION, machineTest.setPrices(-10, 100));

        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Mode.ADMINISTERING, machineTest.getCurrentMode());
        assertEquals(Response.INVALID_PARAM, machineTest.setPrices(-10, 100));
        assertEquals(Response.INVALID_PARAM, machineTest.setPrices(-10, -100));
        assertEquals(Response.INVALID_PARAM, machineTest.setPrices(33, 0));
        assertEquals(Response.INVALID_PARAM, machineTest.setPrices(0, 0));
        assertEquals(Response.INVALID_PARAM, machineTest.setPrices(100, 0));

        assertEquals(Response.OK, machineTest.setPrices(100, 45));
        assertEquals(100, machineTest.getPrice1());
        assertEquals(45, machineTest.getPrice2());

    }

    @Test
    @DisplayName("putCoinFirst")
    public void putCoinFirst() {
        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Mode.ADMINISTERING, machineTest.getCurrentMode());
        assertEquals(Response.ILLEGAL_OPERATION, machineTest.putCoin1());
        machineTest.fillCoins(49, 4);

        machineTest.exitAdminMode();
        assertEquals(Mode.OPERATION, machineTest.getCurrentMode());
        assertEquals(0, machineTest.getCurrentBalance());
        assertEquals(Response.OK, machineTest.putCoin1());
        assertEquals(1, machineTest.getCurrentBalance());
        assertEquals(Response.CANNOT_PERFORM, machineTest.putCoin1());

    }

    @Test
    @DisplayName("putCoinSecond")
    public void putCoinSecond() {
        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Mode.ADMINISTERING, machineTest.getCurrentMode());
        assertEquals(Response.ILLEGAL_OPERATION, machineTest.putCoin2());
        machineTest.fillCoins(49, 49);

        machineTest.exitAdminMode();
        assertEquals(Mode.OPERATION, machineTest.getCurrentMode());
        assertEquals(0, machineTest.getCurrentBalance());
        assertEquals(Response.OK, machineTest.putCoin2());
        assertEquals(2, machineTest.getCurrentBalance());
        assertEquals(Response.CANNOT_PERFORM, machineTest.putCoin2());

    }

    @Test
    @DisplayName("returnMoney")
    public void returnMoney() {
        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Mode.ADMINISTERING, machineTest.getCurrentMode());
        machineTest.fillCoins(1, 2);
        assertEquals(Response.ILLEGAL_OPERATION, machineTest.returnMoney());
        machineTest.fillProducts();

        machineTest.exitAdminMode();
        assertEquals(0, machineTest.getCurrentBalance());
        assertEquals(Response.OK, machineTest.returnMoney());
        assertEquals(0, machineTest.getCurrentBalance());

        // ситуация не может произойти( баланс невозможно вернуть, используя текущее
        // количество монет, возвращает TOO_BIG_CHANGE)

        // если баланс больше суммарной стоимости монет 2 вида, то выдаются все монеты 2
        // вида и разница выдается монетами 1 вида и возвращается ОК;
        machineTest.putCoin1();
        machineTest.putCoin1();
        machineTest.putCoin1();
        machineTest.putCoin1();
        assertEquals(4, machineTest.getCurrentBalance());
        assertEquals(Response.OK, machineTest.returnMoney());
        assertEquals(0, machineTest.getCurrentBalance());

        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Mode.ADMINISTERING, machineTest.getCurrentMode());
        assertEquals(5, machineTest.getCoins1());
        assertEquals(0, machineTest.getCoins2());

        // если баланс четный, то возвращается баланс/2 монет 2 вида и возвращается ОК;
        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Mode.ADMINISTERING, machineTest.getCurrentMode());
        machineTest.fillCoins(1, 3);
        machineTest.exitAdminMode();

        machineTest.putCoin1();
        machineTest.putCoin1();
        machineTest.putCoin1();
        machineTest.putCoin1();
        machineTest.putCoin1();
        machineTest.putCoin1();
        assertEquals(6, machineTest.getCurrentBalance());
        assertEquals(Response.OK, machineTest.returnMoney());
        assertEquals(0, machineTest.getCurrentBalance());

        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Mode.ADMINISTERING, machineTest.getCurrentMode());
        assertEquals(7, machineTest.getCoins1());
        assertEquals(0, machineTest.getCoins2());

        // если баланс больше суммарной стоимости монет 2 вида и если нет монет 1 вида,
        // то возвращается UNSUITABLE_CHANGE
        // такого поведения тоже не может быть, так как пользователь не сможет купить
        // товар при таком количестве монет в аппарате

        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Mode.ADMINISTERING, machineTest.getCurrentMode());
        machineTest.fillCoins(1, 1);
        machineTest.exitAdminMode();

        machineTest.putCoin2();
        machineTest.putCoin2();
        machineTest.putCoin2();
        machineTest.putCoin2();

        assertEquals(8, machineTest.getCurrentBalance());
        assertEquals(Response.OK, machineTest.giveProduct2(1));
        assertEquals(0, machineTest.getCurrentBalance());

        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Mode.ADMINISTERING, machineTest.getCurrentMode());
        assertEquals(0, machineTest.getCoins1());
        assertEquals(4, machineTest.getCoins2());

        machineTest.exitAdminMode();
        machineTest.putCoin2();
        machineTest.putCoin2();
        machineTest.putCoin2();

        assertEquals(6, machineTest.getCurrentBalance());
        assertEquals(Response.UNSUITABLE_CHANGE, machineTest.giveProduct2(1));
        assertEquals(Response.OK, machineTest.returnMoney());

        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Mode.ADMINISTERING, machineTest.getCurrentMode());
        assertEquals(0, machineTest.getCoins1());
        assertEquals(4, machineTest.getCoins2());

        // во всех иныхслучаях выдается баланс/2 монет 2 вида и 1 монета 1 вида и
        // возвращается ОК

        machineTest.exitAdminMode();
        machineTest.putCoin2();
        machineTest.putCoin2();
        machineTest.putCoin1();
        assertEquals(5, machineTest.getCurrentBalance());
        assertEquals(Response.OK, machineTest.returnMoney());
        assertEquals(0, machineTest.getCurrentBalance());

        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Mode.ADMINISTERING, machineTest.getCurrentMode());
        assertEquals(0, machineTest.getCoins1());
        assertEquals(4, machineTest.getCoins2());

    }

    @Test
    @DisplayName("testGiveProductFirst")
    public void testGiveProductFirst() {
        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Mode.ADMINISTERING, machineTest.getCurrentMode());
        assertEquals(Response.ILLEGAL_OPERATION, machineTest.giveProduct1(1));
        machineTest.fillCoins(3, 3);

        // при попытке получить <=0 предметов или больше максимума предметов 1 вида
        // возвращает INVALID_PARAM
        machineTest.exitAdminMode();
        assertEquals(Response.INVALID_PARAM, machineTest.giveProduct1(0));
        assertEquals(Response.INVALID_PARAM, machineTest.giveProduct1(31));

        for (int i = 0; i < 30; ++i) {
            machineTest.putCoin1();
        }
        assertEquals(30, machineTest.getCurrentBalance());
        assertEquals(Response.INVALID_PARAM, machineTest.giveProduct1(0));
        assertEquals(Response.INVALID_PARAM, machineTest.giveProduct1(31));
        machineTest.returnMoney();

        // при попытке получить больше текущего количества предметов 1 вида возвращает
        // INSUFFICIENT_PRODUCT;
        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Mode.ADMINISTERING, machineTest.getCurrentMode());
        machineTest.fillCoins(3, 3);
        machineTest.exitAdminMode();

        assertEquals(Response.OK, machineTest.putCoin2());
        assertEquals(Response.OK, machineTest.putCoin2());
        assertEquals(Response.OK, machineTest.putCoin2());
        assertEquals(Response.OK, machineTest.putCoin2());

        assertEquals(8, machineTest.getCurrentBalance());
        assertEquals(Response.INSUFFICIENT_PRODUCT, machineTest.giveProduct1(1));
        assertEquals(8, machineTest.getCurrentBalance());

        // при отсутствии на счете требуемой суммы возвращается INSUFFICIENT_MONEY;
        assertEquals(Response.OK, machineTest.returnMoney());
        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Mode.ADMINISTERING, machineTest.getCurrentMode());
        assertEquals(Response.OK, machineTest.fillProducts());
        machineTest.fillCoins(2, 1);
        machineTest.exitAdminMode();

        assertEquals(Response.INSUFFICIENT_MONEY, machineTest.giveProduct1(1));

        // ситуация не может произойти( баланс невозможно вернуть, используя текущее
        // количество монет, возвращает TOO_BIG_CHANGE)

        // если баланс больше суммарной стоимости монет 2 вида, то выдаются все монеты 2
        // вида и разница выдается монетами 1 вида и возвращается ОК;
        machineTest.putCoin1();
        machineTest.putCoin1();
        machineTest.putCoin1();
        machineTest.putCoin1();
        machineTest.putCoin1();
        machineTest.putCoin1();
        machineTest.putCoin1();
        machineTest.putCoin1();
        machineTest.putCoin1();
        machineTest.putCoin1();
        machineTest.putCoin1();
        machineTest.putCoin1();

        assertEquals(12, machineTest.getCurrentBalance());
        assertEquals(Response.OK, machineTest.giveProduct1(1));
        assertEquals(0, machineTest.getCurrentBalance());

        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Mode.ADMINISTERING, machineTest.getCurrentMode());
        assertEquals(12, machineTest.getCoins1());
        assertEquals(0, machineTest.getCoins2());

        // если баланс четный, то возвращается баланс/2 монет 2 вида и возвращается ОК;
        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Mode.ADMINISTERING, machineTest.getCurrentMode());
        machineTest.fillCoins(1, 2);
        machineTest.exitAdminMode();

        machineTest.putCoin2();
        machineTest.putCoin2();
        machineTest.putCoin2();
        machineTest.putCoin2();
        machineTest.putCoin1();
        machineTest.putCoin1();
        assertEquals(10, machineTest.getCurrentBalance());
        assertEquals(Response.OK, machineTest.giveProduct1(1));
        assertEquals(0, machineTest.getCurrentBalance());

        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Mode.ADMINISTERING, machineTest.getCurrentMode());
        assertEquals(3, machineTest.getCoins1());
        assertEquals(5, machineTest.getCoins2());

        // в ситуации, когда сдача нечетная, а монет 1 вида нет, возвращается
        // UNSUITABLE_CHANGE
        // ситуация не может произойти, так как цена за товар четная

        // в остальныхслучаях сдача выдается монетами 2 вида когда это возможно, затем
        // — монетами 1 вида,
        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Mode.ADMINISTERING, machineTest.getCurrentMode());
        machineTest.fillCoins(1, 1);

        machineTest.exitAdminMode();
        machineTest.putCoin2();
        machineTest.putCoin2();
        machineTest.putCoin2();
        machineTest.putCoin2();
        machineTest.putCoin1();
        machineTest.putCoin1();
        machineTest.putCoin1();
        machineTest.putCoin1();
        machineTest.putCoin1();

        assertEquals(13, machineTest.getCurrentBalance());
        assertEquals(Response.OK, machineTest.giveProduct1(1));
        assertEquals(0, machineTest.getCurrentBalance());

        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Mode.ADMINISTERING, machineTest.getCurrentMode());
        assertEquals(5, machineTest.getCoins1());
        assertEquals(3, machineTest.getCoins2());

    }

    @Test
    @DisplayName("testGiveProductSecond")
    public void testGiveProductSecond() {
        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Mode.ADMINISTERING, machineTest.getCurrentMode());
        assertEquals(Response.ILLEGAL_OPERATION, machineTest.giveProduct2(1));
        machineTest.fillCoins(3, 3);

        // при попытке получить <=0 предметов или больше максимума предметов 1 вида
        // возвращает INVALID_PARAM
        machineTest.exitAdminMode();
        assertEquals(Response.INVALID_PARAM, machineTest.giveProduct2(0));
        assertEquals(Response.INVALID_PARAM, machineTest.giveProduct2(41));

        for (int i = 0; i < 30; ++i) {
            machineTest.putCoin2();
        }
        assertEquals(60, machineTest.getCurrentBalance());
        assertEquals(Response.INVALID_PARAM, machineTest.giveProduct2(0));
        assertEquals(Response.INVALID_PARAM, machineTest.giveProduct2(41));
        machineTest.returnMoney();

        // при попытке получить больше текущего количества предметов 1 вида возвращает
        // INSUFFICIENT_PRODUCT;
        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Mode.ADMINISTERING, machineTest.getCurrentMode());
        machineTest.fillCoins(3, 3);
        machineTest.exitAdminMode();

        assertEquals(Response.OK, machineTest.putCoin2());
        assertEquals(Response.OK, machineTest.putCoin2());
        assertEquals(Response.OK, machineTest.putCoin2());
        assertEquals(Response.OK, machineTest.putCoin2());

        assertEquals(8, machineTest.getCurrentBalance());
        assertEquals(Response.INSUFFICIENT_PRODUCT, machineTest.giveProduct2(1));
        assertEquals(8, machineTest.getCurrentBalance());

        // при отсутствии на счете требуемой суммы возвращается INSUFFICIENT_MONEY;
        assertEquals(Response.OK, machineTest.returnMoney());
        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Mode.ADMINISTERING, machineTest.getCurrentMode());
        assertEquals(Response.OK, machineTest.fillProducts());
        machineTest.fillCoins(2, 1);
        machineTest.exitAdminMode();

        assertEquals(Response.INSUFFICIENT_MONEY, machineTest.giveProduct2(1));

        // ситуация не может произойти( баланс невозможно вернуть, используя текущее
        // количество монет, возвращает TOO_BIG_CHANGE)

        // если баланс больше суммарной стоимости монет 2 вида, то выдаются все монеты 2
        // вида и разница выдается монетами 1 вида и возвращается ОК;
        machineTest.putCoin1();
        machineTest.putCoin1();
        machineTest.putCoin1();
        machineTest.putCoin1();
        machineTest.putCoin1();
        machineTest.putCoin1();
        machineTest.putCoin1();
        machineTest.putCoin1();


        assertEquals(8, machineTest.getCurrentBalance());
        assertEquals(Response.OK, machineTest.giveProduct2(1));
        assertEquals(0, machineTest.getCurrentBalance());

        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Mode.ADMINISTERING, machineTest.getCurrentMode());
        assertEquals(9, machineTest.getCoins1());
        assertEquals(0, machineTest.getCoins2());

        // если баланс четный, то возвращается баланс/2 монет 2 вида и возвращается ОК;
        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Mode.ADMINISTERING, machineTest.getCurrentMode());
        machineTest.fillCoins(1, 2);
        machineTest.exitAdminMode();

        machineTest.putCoin2();
        machineTest.putCoin2();
        machineTest.putCoin2();
        machineTest.putCoin1();
        assertEquals(7, machineTest.getCurrentBalance());
        assertEquals(Response.OK, machineTest.giveProduct2(1));
        assertEquals(0, machineTest.getCurrentBalance());

        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Mode.ADMINISTERING, machineTest.getCurrentMode());
        assertEquals(2, machineTest.getCoins1());
        assertEquals(4, machineTest.getCoins2());

        // в ситуации, когда сдача нечетная, а монет 1 вида нет, возвращается
        // UNSUITABLE_CHANGE
        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Mode.ADMINISTERING, machineTest.getCurrentMode());
        machineTest.fillCoins(1, 2);
        machineTest.exitAdminMode();

        machineTest.putCoin2();
        machineTest.putCoin2();
        machineTest.putCoin2();
        machineTest.putCoin2();
        assertEquals(8, machineTest.getCurrentBalance());
        assertEquals(Response.OK, machineTest.giveProduct2(1));
        assertEquals(0, machineTest.getCurrentBalance());

        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Mode.ADMINISTERING, machineTest.getCurrentMode());
        assertEquals(0, machineTest.getCoins1());
        assertEquals(5, machineTest.getCoins2());
        machineTest.exitAdminMode();

        machineTest.putCoin2();
        machineTest.putCoin2();
        machineTest.putCoin2();
        machineTest.putCoin2();
        assertEquals(8, machineTest.getCurrentBalance());
        assertEquals(Response.UNSUITABLE_CHANGE, machineTest.giveProduct2(1));
        assertEquals(8, machineTest.getCurrentBalance());
        assertEquals(Response.OK, machineTest.returnMoney());

        // в остальныхслучаях сдача выдается монетами 2 вида когда это возможно, затем
        // — монетами 1 вида,
        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Mode.ADMINISTERING, machineTest.getCurrentMode());
        machineTest.fillCoins(1, 1);

        machineTest.exitAdminMode();
        machineTest.putCoin2();
        machineTest.putCoin1();
        machineTest.putCoin1();
        machineTest.putCoin1();
        machineTest.putCoin1();
        machineTest.putCoin1();
        machineTest.putCoin1();
        machineTest.putCoin1();
        machineTest.putCoin1();

        assertEquals(10, machineTest.getCurrentBalance());
        assertEquals(Response.OK, machineTest.giveProduct2(1));
        assertEquals(0, machineTest.getCurrentBalance());

        machineTest.enterAdminMode(117345294655382L);
        assertEquals(Mode.ADMINISTERING, machineTest.getCurrentMode());
        assertEquals(8, machineTest.getCoins1());
        assertEquals(0, machineTest.getCoins2());

    }
}
